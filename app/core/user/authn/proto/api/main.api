syntax = "v1"

import (
	"type/type.api"
)

/*
TODO X:
- 完整语法手册:
- https://go-zero.dev/cn/docs/design/grammar/
optional	定义当前字段为可选参数	go-zero	request	            json:"name,optional"
options	    定义当前字段的枚举值,多个以竖线|隔开	go-zero	request	json:"gender,options=male"
default	    定义当前字段默认值	go-zero	request	                json:"gender,default=male"
range	    定义当前字段数值范围	go-zero	request	            json:"age,range=[0:120]"
- 重点关注 type, service 语法块
- jwt 使用:
- https://go-zero.dev/cn/docs/advance/jwt
- 示例:
- https://github.com/feihua/zero-admin/blob/master/rpc/sys/internal/logic/loginlogic.go#L75
- https://github.com/Mikaelemmmm/go-zero-looklook/blob/main/app/usercenter/cmd/api/desc/usercenter.api

*/

info(
	title: "user.authn"
	desc: "用户授权(登录/注册/退出)"
	version: "v1"
)

@server(
	prefix: api/v1/user/authn     // todo x: 会在 handler/routes.go 添加 API 统一前缀
	//    jwt: Auth               // todo x: 字段对应 config 内定义, 先在 config 内定义, 然后改此文件
	group: quick                  // todo x: 会影响 handler 目录生成, 生成 handler/group/xxxx
	//  middleware: AuthMiddleware
)
service main {
	@handler AuthBySmsCode    // 快捷注册/登录(智能判断): 短信+验证码
	post /quick/sms (QuickAuthSmsReq) returns (AuthResp)
	
	@handler AuthByEmailCode    // 快捷注册/登录(智能判断): 邮箱+验证码
	post /quick/email (QuickAuthEmailReq) returns (AuthResp)
	
	@handler AuthByOauth    // 快捷注册/登录(智能判断): OAuth(第三方授权)
	post /quick/oauth (QuickAuthOAuthReq) returns (AuthResp)
	
	@handler SendSmsCode     // 发送验证码: 短信 // 服务端 cache + MobileNo 限制频率, 1分钟1次, 15分钟3次, 1天5次
	post /send/sms (SendSmsCodeReq) returns (SendCodeResp)
	
	@handler SendEmailCode // 发送验证码: 邮箱
	post /send/email (SendEmailCodeReq) returns (SendCodeResp)
}

////////////////////////////////////////////////////////////////////////////////////////////////

@server(
	prefix: api/v1/user/authn     // todo x: 会在 handler/routes.go 添加 API 统一前缀
	//    jwt: Auth               // todo x: 字段对应 config 内定义, 先在 config 内定义, 然后改此文件
	group: register              // todo x: 会影响 handler 目录生成, 生成 handler/group/xxxx
	//  middleware: AuthMiddleware
)
service main {
	@handler Register     // 注册(统一+混合):
	post /register (UserRegisterReq) returns (UserRegisterResp)
	
	@handler CheckAccount     // 帐号去重复检查(注册前)
	post /register/check (UserRegisterCheckReq) returns (UserRegisterCheckResp)
	
	@handler Verify     // 注册+激活
	post /register/verify (UserRegisterCheckReq) returns (UserRegisterCheckResp)
}

////////////////////////////////////////////////////////////////////////////////////////////////

@server(
	prefix: api/v1/user/authn   // todo x: 会在 handler/routes.go 添加 API 统一前缀
	//    jwt: Auth               // todo x: 字段对应 config 内定义, 先在 config 内定义, 然后改此文件
	group: auth              // todo x: 会影响 handler 目录生成, 生成 handler/group/xxxx
	//  middleware: AuthMiddleware
)
service main {
	@handler Login // 登录
	post /login (UserLoginReq) returns (AuthResp)
	
	@handler Logout // 退出登录
	post /logout (UserLogoutReq) returns (UserLogoutResp)
}

////////////////////////////////////////////////////////////////////////////////////////////////

@server(
	prefix: api/v1/user/authn/security   // todo x: 会在 handler/routes.go 添加 API 统一前缀
	//    jwt: Auth               // todo x: 字段对应 config 内定义, 先在 config 内定义, 然后改此文件
	group: security              // todo x: 会影响 handler 目录生成, 生成 handler/group/xxxx
	//  middleware: AuthMiddleware
)
service main {
	@handler Captcha     // 图片验证码
	post /captcha (CaptchaReq) returns (CaptchaResp)
	
	@handler MfaAdd     // MFA 令牌创建
	post /mfa/add (MfaAddReq) returns (MfaAddResp)
	
	@handler MfaVerify     // MFA 令牌验证
	post /mfa/verify (MfaVerifyReq) returns (MfaVerifyResp)
	
	// mfa remove
	@handler MfaRemove
	post /mfa/remove (MfaRemoveReq) returns (MfaRemoveResp)
}
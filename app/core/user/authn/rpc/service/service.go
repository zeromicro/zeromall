// Code generated by goctl. DO NOT EDIT.
// Source: main.proto

package service

import (
	"context"

	"user/authn/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AuthMobileReq        = pb.AuthMobileReq
	AuthMobileResp       = pb.AuthMobileResp
	AuthWebReq           = pb.AuthWebReq
	AuthWebResp          = pb.AuthWebResp
	Request              = pb.Request
	Response             = pb.Response
	UserCheckAccountReq  = pb.UserCheckAccountReq
	UserCheckAccountResp = pb.UserCheckAccountResp
	UserLoginReq         = pb.UserLoginReq
	UserLoginResp        = pb.UserLoginResp
	UserLogoutReq        = pb.UserLogoutReq
	UserLogoutResp       = pb.UserLogoutResp
	UserRegisterReq      = pb.UserRegisterReq
	UserRegisterResp     = pb.UserRegisterResp

	Service interface {
		// Register 用户注册:
		Register(ctx context.Context, in *UserRegisterReq, opts ...grpc.CallOption) (*UserRegisterResp, error)
		// CheckAccount 帐号状态检测:
		CheckAccount(ctx context.Context, in *UserCheckAccountReq, opts ...grpc.CallOption) (*UserCheckAccountResp, error)
		// Login 用户登录:
		Login(ctx context.Context, in *UserLoginReq, opts ...grpc.CallOption) (*UserLoginResp, error)
		// Logout 用户退出:
		Logout(ctx context.Context, in *UserLogoutReq, opts ...grpc.CallOption) (*UserLogoutResp, error)
		// AuthMobile 移动端: 鉴权 + token
		AuthMobile(ctx context.Context, in *AuthMobileReq, opts ...grpc.CallOption) (*AuthMobileResp, error)
		// AuthWeb web端: 鉴权 + cookie
		AuthWeb(ctx context.Context, in *AuthWebReq, opts ...grpc.CallOption) (*AuthWebResp, error)
	}

	defaultService struct {
		cli zrpc.Client
	}
)

func NewService(cli zrpc.Client) Service {
	return &defaultService{
		cli: cli,
	}
}

// Register 用户注册:
func (m *defaultService) Register(ctx context.Context, in *UserRegisterReq, opts ...grpc.CallOption) (*UserRegisterResp, error) {
	client := pb.NewServiceClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

// CheckAccount 帐号状态检测:
func (m *defaultService) CheckAccount(ctx context.Context, in *UserCheckAccountReq, opts ...grpc.CallOption) (*UserCheckAccountResp, error) {
	client := pb.NewServiceClient(m.cli.Conn())
	return client.CheckAccount(ctx, in, opts...)
}

// Login 用户登录:
func (m *defaultService) Login(ctx context.Context, in *UserLoginReq, opts ...grpc.CallOption) (*UserLoginResp, error) {
	client := pb.NewServiceClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

// Logout 用户退出:
func (m *defaultService) Logout(ctx context.Context, in *UserLogoutReq, opts ...grpc.CallOption) (*UserLogoutResp, error) {
	client := pb.NewServiceClient(m.cli.Conn())
	return client.Logout(ctx, in, opts...)
}

// AuthMobile 移动端: 鉴权 + token
func (m *defaultService) AuthMobile(ctx context.Context, in *AuthMobileReq, opts ...grpc.CallOption) (*AuthMobileResp, error) {
	client := pb.NewServiceClient(m.cli.Conn())
	return client.AuthMobile(ctx, in, opts...)
}

// AuthWeb web端: 鉴权 + cookie
func (m *defaultService) AuthWeb(ctx context.Context, in *AuthWebReq, opts ...grpc.CallOption) (*AuthWebResp, error) {
	client := pb.NewServiceClient(m.cli.Conn())
	return client.AuthWeb(ctx, in, opts...)
}

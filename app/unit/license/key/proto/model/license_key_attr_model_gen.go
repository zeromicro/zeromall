// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	licenseKeyAttrFieldNames          = builder.RawFieldNames(&LicenseKeyAttr{})
	licenseKeyAttrRows                = strings.Join(licenseKeyAttrFieldNames, ",")
	licenseKeyAttrRowsExpectAutoSet   = strings.Join(stringx.Remove(licenseKeyAttrFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	licenseKeyAttrRowsWithPlaceHolder = strings.Join(stringx.Remove(licenseKeyAttrFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheLicenseKeyAttrIdPrefix        = "cache:licenseKeyAttr:id:"
	cacheLicenseKeyAttrPublicKeyPrefix = "cache:licenseKeyAttr:publicKey:"
)

type (
	licenseKeyAttrModel interface {
		Insert(ctx context.Context, data *LicenseKeyAttr) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*LicenseKeyAttr, error)
		FindOneByPublicKey(ctx context.Context, publicKey string) (*LicenseKeyAttr, error)
		Update(ctx context.Context, data *LicenseKeyAttr) error
		Delete(ctx context.Context, id int64) error
	}

	defaultLicenseKeyAttrModel struct {
		sqlc.CachedConn
		table string
	}

	LicenseKeyAttr struct {
		Id          int64     `db:"id"`
		CreatedAt   time.Time `db:"created_at"`
		UpdatedAt   time.Time `db:"updated_at"`
		DeletedAt   time.Time `db:"deleted_at"`
		Status      int64     `db:"status"`       // 状态： <0=异常状态, >0=正常状态, 1=已分配, -1=封禁
		Desc        string    `db:"desc"`         // 描述信息
		PublicKey   string    `db:"public_key"`   // 公钥
		Expired     int64     `db:"expired"`      // 有效期： <0=异常状态, >0=正常状态, 1=已分配, -1=封禁
		Permission  int64     `db:"permission"`   // 权限: 完整, 部分
		Lifecycle   int64     `db:"lifecycle"`    // 付费方式: 按月续费, 永久有效, 年付费, 订阅： <0=异常状态, >0=正常状态, 1=已分配, -1=封禁
		DeviceLimit int64     `db:"device_limit"` // 设备限制数: 0, 不限制, >0, 限制数目
	}
)

func newLicenseKeyAttrModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultLicenseKeyAttrModel {
	return &defaultLicenseKeyAttrModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`license_key_attr`",
	}
}

func (m *defaultLicenseKeyAttrModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	licenseKeyAttrIdKey := fmt.Sprintf("%s%v", cacheLicenseKeyAttrIdPrefix, id)
	licenseKeyAttrPublicKeyKey := fmt.Sprintf("%s%v", cacheLicenseKeyAttrPublicKeyPrefix, data.PublicKey)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, licenseKeyAttrIdKey, licenseKeyAttrPublicKeyKey)
	return err
}

func (m *defaultLicenseKeyAttrModel) FindOne(ctx context.Context, id int64) (*LicenseKeyAttr, error) {
	licenseKeyAttrIdKey := fmt.Sprintf("%s%v", cacheLicenseKeyAttrIdPrefix, id)
	var resp LicenseKeyAttr
	err := m.QueryRowCtx(ctx, &resp, licenseKeyAttrIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", licenseKeyAttrRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLicenseKeyAttrModel) FindOneByPublicKey(ctx context.Context, publicKey string) (*LicenseKeyAttr, error) {
	licenseKeyAttrPublicKeyKey := fmt.Sprintf("%s%v", cacheLicenseKeyAttrPublicKeyPrefix, publicKey)
	var resp LicenseKeyAttr
	err := m.QueryRowIndexCtx(ctx, &resp, licenseKeyAttrPublicKeyKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `public_key` = ? limit 1", licenseKeyAttrRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, publicKey); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLicenseKeyAttrModel) Insert(ctx context.Context, data *LicenseKeyAttr) (sql.Result, error) {
	licenseKeyAttrIdKey := fmt.Sprintf("%s%v", cacheLicenseKeyAttrIdPrefix, data.Id)
	licenseKeyAttrPublicKeyKey := fmt.Sprintf("%s%v", cacheLicenseKeyAttrPublicKeyPrefix, data.PublicKey)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, licenseKeyAttrRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.CreatedAt, data.UpdatedAt, data.DeletedAt, data.Status, data.Desc, data.PublicKey, data.Expired, data.Permission, data.Lifecycle, data.DeviceLimit)
	}, licenseKeyAttrIdKey, licenseKeyAttrPublicKeyKey)
	return ret, err
}

func (m *defaultLicenseKeyAttrModel) Update(ctx context.Context, newData *LicenseKeyAttr) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	licenseKeyAttrIdKey := fmt.Sprintf("%s%v", cacheLicenseKeyAttrIdPrefix, data.Id)
	licenseKeyAttrPublicKeyKey := fmt.Sprintf("%s%v", cacheLicenseKeyAttrPublicKeyPrefix, data.PublicKey)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, licenseKeyAttrRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.CreatedAt, newData.UpdatedAt, newData.DeletedAt, newData.Status, newData.Desc, newData.PublicKey, newData.Expired, newData.Permission, newData.Lifecycle, newData.DeviceLimit, newData.Id)
	}, licenseKeyAttrIdKey, licenseKeyAttrPublicKeyKey)
	return err
}

func (m *defaultLicenseKeyAttrModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheLicenseKeyAttrIdPrefix, primary)
}

func (m *defaultLicenseKeyAttrModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", licenseKeyAttrRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultLicenseKeyAttrModel) tableName() string {
	return m.table
}

// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	licenseKeyVolumeFieldNames          = builder.RawFieldNames(&LicenseKeyVolume{})
	licenseKeyVolumeRows                = strings.Join(licenseKeyVolumeFieldNames, ",")
	licenseKeyVolumeRowsExpectAutoSet   = strings.Join(stringx.Remove(licenseKeyVolumeFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	licenseKeyVolumeRowsWithPlaceHolder = strings.Join(stringx.Remove(licenseKeyVolumeFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheLicenseKeyVolumeIdPrefix        = "cache:licenseKeyVolume:id:"
	cacheLicenseKeyVolumePublicKeyPrefix = "cache:licenseKeyVolume:publicKey:"
	cacheLicenseKeyVolumeSecretKeyPrefix = "cache:licenseKeyVolume:secretKey:"
)

type (
	licenseKeyVolumeModel interface {
		Insert(ctx context.Context, data *LicenseKeyVolume) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*LicenseKeyVolume, error)
		FindOneByPublicKey(ctx context.Context, publicKey string) (*LicenseKeyVolume, error)
		FindOneBySecretKey(ctx context.Context, secretKey string) (*LicenseKeyVolume, error)
		Update(ctx context.Context, data *LicenseKeyVolume) error
		Delete(ctx context.Context, id int64) error
	}

	defaultLicenseKeyVolumeModel struct {
		sqlc.CachedConn
		table string
	}

	LicenseKeyVolume struct {
		Id        int64     `db:"id"`
		CreatedAt time.Time `db:"created_at"`
		UpdatedAt time.Time `db:"updated_at"`
		DeletedAt time.Time `db:"deleted_at"`
		Status    int64     `db:"status"`     // 状态： <0=异常状态, >0=正常状态, 1=已分配, -1=封禁
		Desc      string    `db:"desc"`       // 描述信息
		PublicKey string    `db:"public_key"` // 公钥
		SecretKey string    `db:"secret_key"` // 私钥
	}
)

func newLicenseKeyVolumeModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultLicenseKeyVolumeModel {
	return &defaultLicenseKeyVolumeModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`license_key_volume`",
	}
}

func (m *defaultLicenseKeyVolumeModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	licenseKeyVolumeIdKey := fmt.Sprintf("%s%v", cacheLicenseKeyVolumeIdPrefix, id)
	licenseKeyVolumePublicKeyKey := fmt.Sprintf("%s%v", cacheLicenseKeyVolumePublicKeyPrefix, data.PublicKey)
	licenseKeyVolumeSecretKeyKey := fmt.Sprintf("%s%v", cacheLicenseKeyVolumeSecretKeyPrefix, data.SecretKey)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, licenseKeyVolumeIdKey, licenseKeyVolumePublicKeyKey, licenseKeyVolumeSecretKeyKey)
	return err
}

func (m *defaultLicenseKeyVolumeModel) FindOne(ctx context.Context, id int64) (*LicenseKeyVolume, error) {
	licenseKeyVolumeIdKey := fmt.Sprintf("%s%v", cacheLicenseKeyVolumeIdPrefix, id)
	var resp LicenseKeyVolume
	err := m.QueryRowCtx(ctx, &resp, licenseKeyVolumeIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", licenseKeyVolumeRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLicenseKeyVolumeModel) FindOneByPublicKey(ctx context.Context, publicKey string) (*LicenseKeyVolume, error) {
	licenseKeyVolumePublicKeyKey := fmt.Sprintf("%s%v", cacheLicenseKeyVolumePublicKeyPrefix, publicKey)
	var resp LicenseKeyVolume
	err := m.QueryRowIndexCtx(ctx, &resp, licenseKeyVolumePublicKeyKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `public_key` = ? limit 1", licenseKeyVolumeRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, publicKey); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLicenseKeyVolumeModel) FindOneBySecretKey(ctx context.Context, secretKey string) (*LicenseKeyVolume, error) {
	licenseKeyVolumeSecretKeyKey := fmt.Sprintf("%s%v", cacheLicenseKeyVolumeSecretKeyPrefix, secretKey)
	var resp LicenseKeyVolume
	err := m.QueryRowIndexCtx(ctx, &resp, licenseKeyVolumeSecretKeyKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `secret_key` = ? limit 1", licenseKeyVolumeRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, secretKey); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLicenseKeyVolumeModel) Insert(ctx context.Context, data *LicenseKeyVolume) (sql.Result, error) {
	licenseKeyVolumeIdKey := fmt.Sprintf("%s%v", cacheLicenseKeyVolumeIdPrefix, data.Id)
	licenseKeyVolumePublicKeyKey := fmt.Sprintf("%s%v", cacheLicenseKeyVolumePublicKeyPrefix, data.PublicKey)
	licenseKeyVolumeSecretKeyKey := fmt.Sprintf("%s%v", cacheLicenseKeyVolumeSecretKeyPrefix, data.SecretKey)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, licenseKeyVolumeRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.CreatedAt, data.UpdatedAt, data.DeletedAt, data.Status, data.Desc, data.PublicKey, data.SecretKey)
	}, licenseKeyVolumeIdKey, licenseKeyVolumePublicKeyKey, licenseKeyVolumeSecretKeyKey)
	return ret, err
}

func (m *defaultLicenseKeyVolumeModel) Update(ctx context.Context, newData *LicenseKeyVolume) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	licenseKeyVolumeIdKey := fmt.Sprintf("%s%v", cacheLicenseKeyVolumeIdPrefix, data.Id)
	licenseKeyVolumePublicKeyKey := fmt.Sprintf("%s%v", cacheLicenseKeyVolumePublicKeyPrefix, data.PublicKey)
	licenseKeyVolumeSecretKeyKey := fmt.Sprintf("%s%v", cacheLicenseKeyVolumeSecretKeyPrefix, data.SecretKey)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, licenseKeyVolumeRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.CreatedAt, newData.UpdatedAt, newData.DeletedAt, newData.Status, newData.Desc, newData.PublicKey, newData.SecretKey, newData.Id)
	}, licenseKeyVolumeIdKey, licenseKeyVolumePublicKeyKey, licenseKeyVolumeSecretKeyKey)
	return err
}

func (m *defaultLicenseKeyVolumeModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheLicenseKeyVolumeIdPrefix, primary)
}

func (m *defaultLicenseKeyVolumeModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", licenseKeyVolumeRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultLicenseKeyVolumeModel) tableName() string {
	return m.table
}
